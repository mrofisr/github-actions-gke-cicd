name: CI Build and CD to Kubernetes Cluster
on:
  push: {}

jobs:
  Build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    env:
      GO111MODULE: on
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/mrofisr/simple:latest
  DockerImagesScan:
    name: Scanning Docker Images
    needs: [Build]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build an image from Dockerfile
        run: docker build -t ghcr.io/mrofisr/simple:latest .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "ghcr.io/mrofisr/simple:latest"
          format: "template"
          template: "@/contrib/sarif.tpl"
          output: "trivy-results.sarif"
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: "trivy-results.sarif"
  DeployToKubernetes:
    name: Deploy To Kubernetes
    needs: [DockerImagesScan]
    runs-on: ubuntu-latest
    steps:
      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd simple
            git pull
            cd kubernetes
            kubectl delete all --namespace backend
            kubectl apply -f namespace.yaml
            kubectl apply -f pod.yaml
            kubectl apply -f services.yaml
            kubectl apply -f autoscale.yaml
            kubectl get svc simple-go-api --namespace backend -o json | jq 